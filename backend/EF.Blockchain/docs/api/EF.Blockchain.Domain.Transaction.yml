### YamlMime:ManagedReference
items:
- uid: EF.Blockchain.Domain.Transaction
  commentId: T:EF.Blockchain.Domain.Transaction
  id: Transaction
  parent: EF.Blockchain.Domain
  children:
  - EF.Blockchain.Domain.Transaction.#ctor(EF.Blockchain.Domain.TransactionType,System.Int64,System.String,System.Collections.Generic.List{EF.Blockchain.Domain.TransactionInput},System.Collections.Generic.List{EF.Blockchain.Domain.TransactionOutput})
  - EF.Blockchain.Domain.Transaction.#ctor(System.Nullable{EF.Blockchain.Domain.TransactionType},System.Nullable{System.Int64},System.Collections.Generic.List{EF.Blockchain.Domain.TransactionInput},System.Collections.Generic.List{EF.Blockchain.Domain.TransactionOutput})
  - EF.Blockchain.Domain.Transaction.FromReward(EF.Blockchain.Domain.TransactionOutput)
  - EF.Blockchain.Domain.Transaction.GetFee
  - EF.Blockchain.Domain.Transaction.GetHash
  - EF.Blockchain.Domain.Transaction.Hash
  - EF.Blockchain.Domain.Transaction.IsValid(System.Int32,System.Int32)
  - EF.Blockchain.Domain.Transaction.Timestamp
  - EF.Blockchain.Domain.Transaction.TxInputs
  - EF.Blockchain.Domain.Transaction.TxOutputs
  - EF.Blockchain.Domain.Transaction.Type
  langs:
  - csharp
  - vb
  name: Transaction
  nameWithType: Transaction
  fullName: EF.Blockchain.Domain.Transaction
  type: Class
  source:
    remote:
      path: backend/EF.Blockchain/src/EF.Blockchain.Domain/Transaction.cs
      branch: main
      repo: https://github.com/efernandes-tech/web3-001-ef-blockchain.git
    id: Transaction
    path: ../src/EF.Blockchain.Domain/Transaction.cs
    startLine: 9
  assemblies:
  - EF.Blockchain.Domain
  namespace: EF.Blockchain.Domain
  summary: Represents a transaction on the blockchain, containing inputs, outputs, and metadata.
  example: []
  syntax:
    content: public class Transaction
    content.vb: Public Class Transaction
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: EF.Blockchain.Domain.Transaction.Type
  commentId: P:EF.Blockchain.Domain.Transaction.Type
  id: Type
  parent: EF.Blockchain.Domain.Transaction
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: Transaction.Type
  fullName: EF.Blockchain.Domain.Transaction.Type
  type: Property
  source:
    remote:
      path: backend/EF.Blockchain/src/EF.Blockchain.Domain/Transaction.cs
      branch: main
      repo: https://github.com/efernandes-tech/web3-001-ef-blockchain.git
    id: Type
    path: ../src/EF.Blockchain.Domain/Transaction.cs
    startLine: 14
  assemblies:
  - EF.Blockchain.Domain
  namespace: EF.Blockchain.Domain
  summary: Type of the transaction (e.g., REGULAR or FEE).
  example: []
  syntax:
    content: public TransactionType Type { get; }
    parameters: []
    return:
      type: EF.Blockchain.Domain.TransactionType
    content.vb: Public Property Type As TransactionType
  overload: EF.Blockchain.Domain.Transaction.Type*
- uid: EF.Blockchain.Domain.Transaction.Timestamp
  commentId: P:EF.Blockchain.Domain.Transaction.Timestamp
  id: Timestamp
  parent: EF.Blockchain.Domain.Transaction
  langs:
  - csharp
  - vb
  name: Timestamp
  nameWithType: Transaction.Timestamp
  fullName: EF.Blockchain.Domain.Transaction.Timestamp
  type: Property
  source:
    remote:
      path: backend/EF.Blockchain/src/EF.Blockchain.Domain/Transaction.cs
      branch: main
      repo: https://github.com/efernandes-tech/web3-001-ef-blockchain.git
    id: Timestamp
    path: ../src/EF.Blockchain.Domain/Transaction.cs
    startLine: 19
  assemblies:
  - EF.Blockchain.Domain
  namespace: EF.Blockchain.Domain
  summary: Timestamp in milliseconds when the transaction was created.
  example: []
  syntax:
    content: public long Timestamp { get; }
    parameters: []
    return:
      type: System.Int64
    content.vb: Public Property Timestamp As Long
  overload: EF.Blockchain.Domain.Transaction.Timestamp*
- uid: EF.Blockchain.Domain.Transaction.Hash
  commentId: P:EF.Blockchain.Domain.Transaction.Hash
  id: Hash
  parent: EF.Blockchain.Domain.Transaction
  langs:
  - csharp
  - vb
  name: Hash
  nameWithType: Transaction.Hash
  fullName: EF.Blockchain.Domain.Transaction.Hash
  type: Property
  source:
    remote:
      path: backend/EF.Blockchain/src/EF.Blockchain.Domain/Transaction.cs
      branch: main
      repo: https://github.com/efernandes-tech/web3-001-ef-blockchain.git
    id: Hash
    path: ../src/EF.Blockchain.Domain/Transaction.cs
    startLine: 24
  assemblies:
  - EF.Blockchain.Domain
  namespace: EF.Blockchain.Domain
  summary: Unique hash of the transaction.
  example: []
  syntax:
    content: public string Hash { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Hash As String
  overload: EF.Blockchain.Domain.Transaction.Hash*
- uid: EF.Blockchain.Domain.Transaction.TxInputs
  commentId: P:EF.Blockchain.Domain.Transaction.TxInputs
  id: TxInputs
  parent: EF.Blockchain.Domain.Transaction
  langs:
  - csharp
  - vb
  name: TxInputs
  nameWithType: Transaction.TxInputs
  fullName: EF.Blockchain.Domain.Transaction.TxInputs
  type: Property
  source:
    remote:
      path: backend/EF.Blockchain/src/EF.Blockchain.Domain/Transaction.cs
      branch: main
      repo: https://github.com/efernandes-tech/web3-001-ef-blockchain.git
    id: TxInputs
    path: ../src/EF.Blockchain.Domain/Transaction.cs
    startLine: 29
  assemblies:
  - EF.Blockchain.Domain
  namespace: EF.Blockchain.Domain
  summary: List of inputs that reference previous unspent outputs.
  example: []
  syntax:
    content: public List<TransactionInput>? TxInputs { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{EF.Blockchain.Domain.TransactionInput}
    content.vb: Public Property TxInputs As List(Of TransactionInput)
  overload: EF.Blockchain.Domain.Transaction.TxInputs*
- uid: EF.Blockchain.Domain.Transaction.TxOutputs
  commentId: P:EF.Blockchain.Domain.Transaction.TxOutputs
  id: TxOutputs
  parent: EF.Blockchain.Domain.Transaction
  langs:
  - csharp
  - vb
  name: TxOutputs
  nameWithType: Transaction.TxOutputs
  fullName: EF.Blockchain.Domain.Transaction.TxOutputs
  type: Property
  source:
    remote:
      path: backend/EF.Blockchain/src/EF.Blockchain.Domain/Transaction.cs
      branch: main
      repo: https://github.com/efernandes-tech/web3-001-ef-blockchain.git
    id: TxOutputs
    path: ../src/EF.Blockchain.Domain/Transaction.cs
    startLine: 34
  assemblies:
  - EF.Blockchain.Domain
  namespace: EF.Blockchain.Domain
  summary: List of outputs generated by this transaction.
  example: []
  syntax:
    content: public List<TransactionOutput> TxOutputs { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{EF.Blockchain.Domain.TransactionOutput}
    content.vb: Public Property TxOutputs As List(Of TransactionOutput)
  overload: EF.Blockchain.Domain.Transaction.TxOutputs*
- uid: EF.Blockchain.Domain.Transaction.#ctor(EF.Blockchain.Domain.TransactionType,System.Int64,System.String,System.Collections.Generic.List{EF.Blockchain.Domain.TransactionInput},System.Collections.Generic.List{EF.Blockchain.Domain.TransactionOutput})
  commentId: M:EF.Blockchain.Domain.Transaction.#ctor(EF.Blockchain.Domain.TransactionType,System.Int64,System.String,System.Collections.Generic.List{EF.Blockchain.Domain.TransactionInput},System.Collections.Generic.List{EF.Blockchain.Domain.TransactionOutput})
  id: '#ctor(EF.Blockchain.Domain.TransactionType,System.Int64,System.String,System.Collections.Generic.List{EF.Blockchain.Domain.TransactionInput},System.Collections.Generic.List{EF.Blockchain.Domain.TransactionOutput})'
  parent: EF.Blockchain.Domain.Transaction
  langs:
  - csharp
  - vb
  name: Transaction(TransactionType, long, string, List<TransactionInput>?, List<TransactionOutput>?)
  nameWithType: Transaction.Transaction(TransactionType, long, string, List<TransactionInput>?, List<TransactionOutput>?)
  fullName: EF.Blockchain.Domain.Transaction.Transaction(EF.Blockchain.Domain.TransactionType, long, string, System.Collections.Generic.List<EF.Blockchain.Domain.TransactionInput>?, System.Collections.Generic.List<EF.Blockchain.Domain.TransactionOutput>?)
  type: Constructor
  source:
    remote:
      path: backend/EF.Blockchain/src/EF.Blockchain.Domain/Transaction.cs
      branch: main
      repo: https://github.com/efernandes-tech/web3-001-ef-blockchain.git
    id: .ctor
    path: ../src/EF.Blockchain.Domain/Transaction.cs
    startLine: 39
  assemblies:
  - EF.Blockchain.Domain
  namespace: EF.Blockchain.Domain
  summary: Constructor used for JSON deserialization.
  example: []
  syntax:
    content: >-
      [JsonConstructor]

      public Transaction(TransactionType type, long timestamp, string hash, List<TransactionInput>? txInputs = null, List<TransactionOutput>? txOutputs = null)
    parameters:
    - id: type
      type: EF.Blockchain.Domain.TransactionType
    - id: timestamp
      type: System.Int64
    - id: hash
      type: System.String
    - id: txInputs
      type: System.Collections.Generic.List{EF.Blockchain.Domain.TransactionInput}
    - id: txOutputs
      type: System.Collections.Generic.List{EF.Blockchain.Domain.TransactionOutput}
    content.vb: >-
      <JsonConstructor>

      Public Sub New(type As TransactionType, timestamp As Long, hash As String, txInputs As List(Of TransactionInput) = Nothing, txOutputs As List(Of TransactionOutput) = Nothing)
  overload: EF.Blockchain.Domain.Transaction.#ctor*
  attributes:
  - type: System.Text.Json.Serialization.JsonConstructorAttribute
    ctor: System.Text.Json.Serialization.JsonConstructorAttribute.#ctor
    arguments: []
  nameWithType.vb: Transaction.New(TransactionType, Long, String, List(Of TransactionInput), List(Of TransactionOutput))
  fullName.vb: EF.Blockchain.Domain.Transaction.New(EF.Blockchain.Domain.TransactionType, Long, String, System.Collections.Generic.List(Of EF.Blockchain.Domain.TransactionInput), System.Collections.Generic.List(Of EF.Blockchain.Domain.TransactionOutput))
  name.vb: New(TransactionType, Long, String, List(Of TransactionInput), List(Of TransactionOutput))
- uid: EF.Blockchain.Domain.Transaction.#ctor(System.Nullable{EF.Blockchain.Domain.TransactionType},System.Nullable{System.Int64},System.Collections.Generic.List{EF.Blockchain.Domain.TransactionInput},System.Collections.Generic.List{EF.Blockchain.Domain.TransactionOutput})
  commentId: M:EF.Blockchain.Domain.Transaction.#ctor(System.Nullable{EF.Blockchain.Domain.TransactionType},System.Nullable{System.Int64},System.Collections.Generic.List{EF.Blockchain.Domain.TransactionInput},System.Collections.Generic.List{EF.Blockchain.Domain.TransactionOutput})
  id: '#ctor(System.Nullable{EF.Blockchain.Domain.TransactionType},System.Nullable{System.Int64},System.Collections.Generic.List{EF.Blockchain.Domain.TransactionInput},System.Collections.Generic.List{EF.Blockchain.Domain.TransactionOutput})'
  parent: EF.Blockchain.Domain.Transaction
  langs:
  - csharp
  - vb
  name: Transaction(TransactionType?, long?, List<TransactionInput>?, List<TransactionOutput>?)
  nameWithType: Transaction.Transaction(TransactionType?, long?, List<TransactionInput>?, List<TransactionOutput>?)
  fullName: EF.Blockchain.Domain.Transaction.Transaction(EF.Blockchain.Domain.TransactionType?, long?, System.Collections.Generic.List<EF.Blockchain.Domain.TransactionInput>?, System.Collections.Generic.List<EF.Blockchain.Domain.TransactionOutput>?)
  type: Constructor
  source:
    remote:
      path: backend/EF.Blockchain/src/EF.Blockchain.Domain/Transaction.cs
      branch: main
      repo: https://github.com/efernandes-tech/web3-001-ef-blockchain.git
    id: .ctor
    path: ../src/EF.Blockchain.Domain/Transaction.cs
    startLine: 57
  assemblies:
  - EF.Blockchain.Domain
  namespace: EF.Blockchain.Domain
  summary: Creates a new transaction with optional parameters. Automatically computes the hash and sets output references.
  example: []
  syntax:
    content: public Transaction(TransactionType? type = null, long? timestamp = null, List<TransactionInput>? txInputs = null, List<TransactionOutput>? txOutputs = null)
    parameters:
    - id: type
      type: System.Nullable{EF.Blockchain.Domain.TransactionType}
    - id: timestamp
      type: System.Nullable{System.Int64}
    - id: txInputs
      type: System.Collections.Generic.List{EF.Blockchain.Domain.TransactionInput}
    - id: txOutputs
      type: System.Collections.Generic.List{EF.Blockchain.Domain.TransactionOutput}
    content.vb: Public Sub New(type As TransactionType? = Nothing, timestamp As Long? = Nothing, txInputs As List(Of TransactionInput) = Nothing, txOutputs As List(Of TransactionOutput) = Nothing)
  overload: EF.Blockchain.Domain.Transaction.#ctor*
  nameWithType.vb: Transaction.New(TransactionType?, Long?, List(Of TransactionInput), List(Of TransactionOutput))
  fullName.vb: EF.Blockchain.Domain.Transaction.New(EF.Blockchain.Domain.TransactionType?, Long?, System.Collections.Generic.List(Of EF.Blockchain.Domain.TransactionInput), System.Collections.Generic.List(Of EF.Blockchain.Domain.TransactionOutput))
  name.vb: New(TransactionType?, Long?, List(Of TransactionInput), List(Of TransactionOutput))
- uid: EF.Blockchain.Domain.Transaction.GetHash
  commentId: M:EF.Blockchain.Domain.Transaction.GetHash
  id: GetHash
  parent: EF.Blockchain.Domain.Transaction
  langs:
  - csharp
  - vb
  name: GetHash()
  nameWithType: Transaction.GetHash()
  fullName: EF.Blockchain.Domain.Transaction.GetHash()
  type: Method
  source:
    remote:
      path: backend/EF.Blockchain/src/EF.Blockchain.Domain/Transaction.cs
      branch: main
      repo: https://github.com/efernandes-tech/web3-001-ef-blockchain.git
    id: GetHash
    path: ../src/EF.Blockchain.Domain/Transaction.cs
    startLine: 81
  assemblies:
  - EF.Blockchain.Domain
  namespace: EF.Blockchain.Domain
  summary: Calculates the SHA-256 hash of the transaction.
  example: []
  syntax:
    content: public string GetHash()
    return:
      type: System.String
      description: The hex-encoded lowercase hash string.
    content.vb: Public Function GetHash() As String
  overload: EF.Blockchain.Domain.Transaction.GetHash*
- uid: EF.Blockchain.Domain.Transaction.GetFee
  commentId: M:EF.Blockchain.Domain.Transaction.GetFee
  id: GetFee
  parent: EF.Blockchain.Domain.Transaction
  langs:
  - csharp
  - vb
  name: GetFee()
  nameWithType: Transaction.GetFee()
  fullName: EF.Blockchain.Domain.Transaction.GetFee()
  type: Method
  source:
    remote:
      path: backend/EF.Blockchain/src/EF.Blockchain.Domain/Transaction.cs
      branch: main
      repo: https://github.com/efernandes-tech/web3-001-ef-blockchain.git
    id: GetFee
    path: ../src/EF.Blockchain.Domain/Transaction.cs
    startLine: 102
  assemblies:
  - EF.Blockchain.Domain
  namespace: EF.Blockchain.Domain
  summary: Calculates the fee of the transaction (input sum - output sum).
  example: []
  syntax:
    content: public int GetFee()
    return:
      type: System.Int32
      description: The fee amount.
    content.vb: Public Function GetFee() As Integer
  overload: EF.Blockchain.Domain.Transaction.GetFee*
- uid: EF.Blockchain.Domain.Transaction.IsValid(System.Int32,System.Int32)
  commentId: M:EF.Blockchain.Domain.Transaction.IsValid(System.Int32,System.Int32)
  id: IsValid(System.Int32,System.Int32)
  parent: EF.Blockchain.Domain.Transaction
  langs:
  - csharp
  - vb
  name: IsValid(int, int)
  nameWithType: Transaction.IsValid(int, int)
  fullName: EF.Blockchain.Domain.Transaction.IsValid(int, int)
  type: Method
  source:
    remote:
      path: backend/EF.Blockchain/src/EF.Blockchain.Domain/Transaction.cs
      branch: main
      repo: https://github.com/efernandes-tech/web3-001-ef-blockchain.git
    id: IsValid
    path: ../src/EF.Blockchain.Domain/Transaction.cs
    startLine: 119
  assemblies:
  - EF.Blockchain.Domain
  namespace: EF.Blockchain.Domain
  summary: Validates the transaction, checking signatures, input/output consistency, hash integrity, and reward logic.
  example: []
  syntax:
    content: public Validation IsValid(int difficulty, int totalFees)
    parameters:
    - id: difficulty
      type: System.Int32
      description: Blockchain difficulty at the time.
    - id: totalFees
      type: System.Int32
      description: Total fees collected for this block.
    return:
      type: EF.Blockchain.Domain.Validation
      description: A <xref href="EF.Blockchain.Domain.Validation" data-throw-if-not-resolved="false"></xref> result indicating if the transaction is valid.
    content.vb: Public Function IsValid(difficulty As Integer, totalFees As Integer) As Validation
  overload: EF.Blockchain.Domain.Transaction.IsValid*
  nameWithType.vb: Transaction.IsValid(Integer, Integer)
  fullName.vb: EF.Blockchain.Domain.Transaction.IsValid(Integer, Integer)
  name.vb: IsValid(Integer, Integer)
- uid: EF.Blockchain.Domain.Transaction.FromReward(EF.Blockchain.Domain.TransactionOutput)
  commentId: M:EF.Blockchain.Domain.Transaction.FromReward(EF.Blockchain.Domain.TransactionOutput)
  id: FromReward(EF.Blockchain.Domain.TransactionOutput)
  parent: EF.Blockchain.Domain.Transaction
  langs:
  - csharp
  - vb
  name: FromReward(TransactionOutput)
  nameWithType: Transaction.FromReward(TransactionOutput)
  fullName: EF.Blockchain.Domain.Transaction.FromReward(EF.Blockchain.Domain.TransactionOutput)
  type: Method
  source:
    remote:
      path: backend/EF.Blockchain/src/EF.Blockchain.Domain/Transaction.cs
      branch: main
      repo: https://github.com/efernandes-tech/web3-001-ef-blockchain.git
    id: FromReward
    path: ../src/EF.Blockchain.Domain/Transaction.cs
    startLine: 164
  assemblies:
  - EF.Blockchain.Domain
  namespace: EF.Blockchain.Domain
  summary: Creates a special transaction that represents a mining reward (fee transaction).
  example: []
  syntax:
    content: public static Transaction FromReward(TransactionOutput txo)
    parameters:
    - id: txo
      type: EF.Blockchain.Domain.TransactionOutput
      description: The output that represents the reward to the miner.
    return:
      type: EF.Blockchain.Domain.Transaction
      description: A fee-type transaction.
    content.vb: Public Shared Function FromReward(txo As TransactionOutput) As Transaction
  overload: EF.Blockchain.Domain.Transaction.FromReward*
references:
- uid: EF.Blockchain.Domain
  commentId: N:EF.Blockchain.Domain
  href: EF.html
  name: EF.Blockchain.Domain
  nameWithType: EF.Blockchain.Domain
  fullName: EF.Blockchain.Domain
  spec.csharp:
  - uid: EF
    name: EF
    href: EF.html
  - name: .
  - uid: EF.Blockchain
    name: Blockchain
    href: EF.Blockchain.html
  - name: .
  - uid: EF.Blockchain.Domain
    name: Domain
    href: EF.Blockchain.Domain.html
  spec.vb:
  - uid: EF
    name: EF
    href: EF.html
  - name: .
  - uid: EF.Blockchain
    name: Blockchain
    href: EF.Blockchain.html
  - name: .
  - uid: EF.Blockchain.Domain
    name: Domain
    href: EF.Blockchain.Domain.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: EF.Blockchain.Domain.Transaction.Type*
  commentId: Overload:EF.Blockchain.Domain.Transaction.Type
  href: EF.Blockchain.Domain.Transaction.html#EF_Blockchain_Domain_Transaction_Type
  name: Type
  nameWithType: Transaction.Type
  fullName: EF.Blockchain.Domain.Transaction.Type
- uid: EF.Blockchain.Domain.TransactionType
  commentId: T:EF.Blockchain.Domain.TransactionType
  parent: EF.Blockchain.Domain
  href: EF.Blockchain.Domain.TransactionType.html
  name: TransactionType
  nameWithType: TransactionType
  fullName: EF.Blockchain.Domain.TransactionType
- uid: EF.Blockchain.Domain.Transaction.Timestamp*
  commentId: Overload:EF.Blockchain.Domain.Transaction.Timestamp
  href: EF.Blockchain.Domain.Transaction.html#EF_Blockchain_Domain_Transaction_Timestamp
  name: Timestamp
  nameWithType: Transaction.Timestamp
  fullName: EF.Blockchain.Domain.Transaction.Timestamp
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int64
  name: long
  nameWithType: long
  fullName: long
  nameWithType.vb: Long
  fullName.vb: Long
  name.vb: Long
- uid: EF.Blockchain.Domain.Transaction.Hash*
  commentId: Overload:EF.Blockchain.Domain.Transaction.Hash
  href: EF.Blockchain.Domain.Transaction.html#EF_Blockchain_Domain_Transaction_Hash
  name: Hash
  nameWithType: Transaction.Hash
  fullName: EF.Blockchain.Domain.Transaction.Hash
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: EF.Blockchain.Domain.Transaction.TxInputs*
  commentId: Overload:EF.Blockchain.Domain.Transaction.TxInputs
  href: EF.Blockchain.Domain.Transaction.html#EF_Blockchain_Domain_Transaction_TxInputs
  name: TxInputs
  nameWithType: Transaction.TxInputs
  fullName: EF.Blockchain.Domain.Transaction.TxInputs
- uid: System.Collections.Generic.List{EF.Blockchain.Domain.TransactionInput}
  commentId: T:System.Collections.Generic.List{EF.Blockchain.Domain.TransactionInput}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<TransactionInput>
  nameWithType: List<TransactionInput>
  fullName: System.Collections.Generic.List<EF.Blockchain.Domain.TransactionInput>
  nameWithType.vb: List(Of TransactionInput)
  fullName.vb: System.Collections.Generic.List(Of EF.Blockchain.Domain.TransactionInput)
  name.vb: List(Of TransactionInput)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: EF.Blockchain.Domain.TransactionInput
    name: TransactionInput
    href: EF.Blockchain.Domain.TransactionInput.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: EF.Blockchain.Domain.TransactionInput
    name: TransactionInput
    href: EF.Blockchain.Domain.TransactionInput.html
  - name: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: EF.Blockchain.Domain.Transaction.TxOutputs*
  commentId: Overload:EF.Blockchain.Domain.Transaction.TxOutputs
  href: EF.Blockchain.Domain.Transaction.html#EF_Blockchain_Domain_Transaction_TxOutputs
  name: TxOutputs
  nameWithType: Transaction.TxOutputs
  fullName: EF.Blockchain.Domain.Transaction.TxOutputs
- uid: System.Collections.Generic.List{EF.Blockchain.Domain.TransactionOutput}
  commentId: T:System.Collections.Generic.List{EF.Blockchain.Domain.TransactionOutput}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<TransactionOutput>
  nameWithType: List<TransactionOutput>
  fullName: System.Collections.Generic.List<EF.Blockchain.Domain.TransactionOutput>
  nameWithType.vb: List(Of TransactionOutput)
  fullName.vb: System.Collections.Generic.List(Of EF.Blockchain.Domain.TransactionOutput)
  name.vb: List(Of TransactionOutput)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: EF.Blockchain.Domain.TransactionOutput
    name: TransactionOutput
    href: EF.Blockchain.Domain.TransactionOutput.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: EF.Blockchain.Domain.TransactionOutput
    name: TransactionOutput
    href: EF.Blockchain.Domain.TransactionOutput.html
  - name: )
- uid: EF.Blockchain.Domain.Transaction.#ctor*
  commentId: Overload:EF.Blockchain.Domain.Transaction.#ctor
  href: EF.Blockchain.Domain.Transaction.html#EF_Blockchain_Domain_Transaction__ctor_EF_Blockchain_Domain_TransactionType_System_Int64_System_String_System_Collections_Generic_List_EF_Blockchain_Domain_TransactionInput__System_Collections_Generic_List_EF_Blockchain_Domain_TransactionOutput__
  name: Transaction
  nameWithType: Transaction.Transaction
  fullName: EF.Blockchain.Domain.Transaction.Transaction
  nameWithType.vb: Transaction.New
  fullName.vb: EF.Blockchain.Domain.Transaction.New
  name.vb: New
- uid: System.Nullable{EF.Blockchain.Domain.TransactionType}
  commentId: T:System.Nullable{EF.Blockchain.Domain.TransactionType}
  parent: System
  definition: System.Nullable`1
  href: EF.Blockchain.Domain.TransactionType.html
  name: TransactionType?
  nameWithType: TransactionType?
  fullName: EF.Blockchain.Domain.TransactionType?
  spec.csharp:
  - uid: EF.Blockchain.Domain.TransactionType
    name: TransactionType
    href: EF.Blockchain.Domain.TransactionType.html
  - name: '?'
  spec.vb:
  - uid: EF.Blockchain.Domain.TransactionType
    name: TransactionType
    href: EF.Blockchain.Domain.TransactionType.html
  - name: '?'
- uid: System.Nullable{System.Int64}
  commentId: T:System.Nullable{System.Int64}
  parent: System
  definition: System.Nullable`1
  href: https://learn.microsoft.com/dotnet/api/system.int64
  name: long?
  nameWithType: long?
  fullName: long?
  nameWithType.vb: Long?
  fullName.vb: Long?
  name.vb: Long?
  spec.csharp:
  - uid: System.Int64
    name: long
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int64
  - name: '?'
  spec.vb:
  - uid: System.Int64
    name: Long
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int64
  - name: '?'
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: EF.Blockchain.Domain.Transaction.GetHash*
  commentId: Overload:EF.Blockchain.Domain.Transaction.GetHash
  href: EF.Blockchain.Domain.Transaction.html#EF_Blockchain_Domain_Transaction_GetHash
  name: GetHash
  nameWithType: Transaction.GetHash
  fullName: EF.Blockchain.Domain.Transaction.GetHash
- uid: EF.Blockchain.Domain.Transaction.GetFee*
  commentId: Overload:EF.Blockchain.Domain.Transaction.GetFee
  href: EF.Blockchain.Domain.Transaction.html#EF_Blockchain_Domain_Transaction_GetFee
  name: GetFee
  nameWithType: Transaction.GetFee
  fullName: EF.Blockchain.Domain.Transaction.GetFee
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: EF.Blockchain.Domain.Validation
  commentId: T:EF.Blockchain.Domain.Validation
  parent: EF.Blockchain.Domain
  href: EF.Blockchain.Domain.Validation.html
  name: Validation
  nameWithType: Validation
  fullName: EF.Blockchain.Domain.Validation
- uid: EF.Blockchain.Domain.Transaction.IsValid*
  commentId: Overload:EF.Blockchain.Domain.Transaction.IsValid
  href: EF.Blockchain.Domain.Transaction.html#EF_Blockchain_Domain_Transaction_IsValid_System_Int32_System_Int32_
  name: IsValid
  nameWithType: Transaction.IsValid
  fullName: EF.Blockchain.Domain.Transaction.IsValid
- uid: EF.Blockchain.Domain.Transaction.FromReward*
  commentId: Overload:EF.Blockchain.Domain.Transaction.FromReward
  href: EF.Blockchain.Domain.Transaction.html#EF_Blockchain_Domain_Transaction_FromReward_EF_Blockchain_Domain_TransactionOutput_
  name: FromReward
  nameWithType: Transaction.FromReward
  fullName: EF.Blockchain.Domain.Transaction.FromReward
- uid: EF.Blockchain.Domain.TransactionOutput
  commentId: T:EF.Blockchain.Domain.TransactionOutput
  parent: EF.Blockchain.Domain
  href: EF.Blockchain.Domain.TransactionOutput.html
  name: TransactionOutput
  nameWithType: TransactionOutput
  fullName: EF.Blockchain.Domain.TransactionOutput
- uid: EF.Blockchain.Domain.Transaction
  commentId: T:EF.Blockchain.Domain.Transaction
  parent: EF.Blockchain.Domain
  href: EF.Blockchain.Domain.Transaction.html
  name: Transaction
  nameWithType: Transaction
  fullName: EF.Blockchain.Domain.Transaction
