### YamlMime:ManagedReference
items:
- uid: EF.Blockchain.Domain.TransactionOutput
  commentId: T:EF.Blockchain.Domain.TransactionOutput
  id: TransactionOutput
  parent: EF.Blockchain.Domain
  children:
  - EF.Blockchain.Domain.TransactionOutput.#ctor(System.String,System.Int32,System.String)
  - EF.Blockchain.Domain.TransactionOutput.Amount
  - EF.Blockchain.Domain.TransactionOutput.GetHash
  - EF.Blockchain.Domain.TransactionOutput.IsValid
  - EF.Blockchain.Domain.TransactionOutput.SetTx(System.String)
  - EF.Blockchain.Domain.TransactionOutput.ToAddress
  - EF.Blockchain.Domain.TransactionOutput.Tx
  langs:
  - csharp
  - vb
  name: TransactionOutput
  nameWithType: TransactionOutput
  fullName: EF.Blockchain.Domain.TransactionOutput
  type: Class
  source:
    remote:
      path: backend/EF.Blockchain/src/EF.Blockchain.Domain/TransactionOutput.cs
      branch: main
      repo: https://github.com/efernandes-tech/web3-001-ef-blockchain.git
    id: TransactionOutput
    path: ../src/EF.Blockchain.Domain/TransactionOutput.cs
    startLine: 9
  assemblies:
  - EF.Blockchain.Domain
  namespace: EF.Blockchain.Domain
  summary: >-
    Represents a transaction output in the blockchain.

    Contains information about the receiver, the amount, and the parent transaction hash.
  example: []
  syntax:
    content: public class TransactionOutput
    content.vb: Public Class TransactionOutput
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: EF.Blockchain.Domain.TransactionOutput.ToAddress
  commentId: P:EF.Blockchain.Domain.TransactionOutput.ToAddress
  id: ToAddress
  parent: EF.Blockchain.Domain.TransactionOutput
  langs:
  - csharp
  - vb
  name: ToAddress
  nameWithType: TransactionOutput.ToAddress
  fullName: EF.Blockchain.Domain.TransactionOutput.ToAddress
  type: Property
  source:
    remote:
      path: backend/EF.Blockchain/src/EF.Blockchain.Domain/TransactionOutput.cs
      branch: main
      repo: https://github.com/efernandes-tech/web3-001-ef-blockchain.git
    id: ToAddress
    path: ../src/EF.Blockchain.Domain/TransactionOutput.cs
    startLine: 14
  assemblies:
  - EF.Blockchain.Domain
  namespace: EF.Blockchain.Domain
  summary: Gets the address of the receiver.
  example: []
  syntax:
    content: public string ToAddress { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property ToAddress As String
  overload: EF.Blockchain.Domain.TransactionOutput.ToAddress*
- uid: EF.Blockchain.Domain.TransactionOutput.Amount
  commentId: P:EF.Blockchain.Domain.TransactionOutput.Amount
  id: Amount
  parent: EF.Blockchain.Domain.TransactionOutput
  langs:
  - csharp
  - vb
  name: Amount
  nameWithType: TransactionOutput.Amount
  fullName: EF.Blockchain.Domain.TransactionOutput.Amount
  type: Property
  source:
    remote:
      path: backend/EF.Blockchain/src/EF.Blockchain.Domain/TransactionOutput.cs
      branch: main
      repo: https://github.com/efernandes-tech/web3-001-ef-blockchain.git
    id: Amount
    path: ../src/EF.Blockchain.Domain/TransactionOutput.cs
    startLine: 19
  assemblies:
  - EF.Blockchain.Domain
  namespace: EF.Blockchain.Domain
  summary: Gets the amount being transferred.
  example: []
  syntax:
    content: public int Amount { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property Amount As Integer
  overload: EF.Blockchain.Domain.TransactionOutput.Amount*
- uid: EF.Blockchain.Domain.TransactionOutput.Tx
  commentId: P:EF.Blockchain.Domain.TransactionOutput.Tx
  id: Tx
  parent: EF.Blockchain.Domain.TransactionOutput
  langs:
  - csharp
  - vb
  name: Tx
  nameWithType: TransactionOutput.Tx
  fullName: EF.Blockchain.Domain.TransactionOutput.Tx
  type: Property
  source:
    remote:
      path: backend/EF.Blockchain/src/EF.Blockchain.Domain/TransactionOutput.cs
      branch: main
      repo: https://github.com/efernandes-tech/web3-001-ef-blockchain.git
    id: Tx
    path: ../src/EF.Blockchain.Domain/TransactionOutput.cs
    startLine: 24
  assemblies:
  - EF.Blockchain.Domain
  namespace: EF.Blockchain.Domain
  summary: Gets or sets the transaction hash this output belongs to.
  example: []
  syntax:
    content: public string? Tx { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Tx As String
  overload: EF.Blockchain.Domain.TransactionOutput.Tx*
- uid: EF.Blockchain.Domain.TransactionOutput.#ctor(System.String,System.Int32,System.String)
  commentId: M:EF.Blockchain.Domain.TransactionOutput.#ctor(System.String,System.Int32,System.String)
  id: '#ctor(System.String,System.Int32,System.String)'
  parent: EF.Blockchain.Domain.TransactionOutput
  langs:
  - csharp
  - vb
  name: TransactionOutput(string, int, string?)
  nameWithType: TransactionOutput.TransactionOutput(string, int, string?)
  fullName: EF.Blockchain.Domain.TransactionOutput.TransactionOutput(string, int, string?)
  type: Constructor
  source:
    remote:
      path: backend/EF.Blockchain/src/EF.Blockchain.Domain/TransactionOutput.cs
      branch: main
      repo: https://github.com/efernandes-tech/web3-001-ef-blockchain.git
    id: .ctor
    path: ../src/EF.Blockchain.Domain/TransactionOutput.cs
    startLine: 32
  assemblies:
  - EF.Blockchain.Domain
  namespace: EF.Blockchain.Domain
  summary: Initializes a new instance of the <xref href="EF.Blockchain.Domain.TransactionOutput" data-throw-if-not-resolved="false"></xref> class.
  example: []
  syntax:
    content: public TransactionOutput(string toAddress = "", int amount = 0, string? tx = "")
    parameters:
    - id: toAddress
      type: System.String
      description: The destination address.
    - id: amount
      type: System.Int32
      description: The amount to be transferred.
    - id: tx
      type: System.String
      description: Optional parent transaction hash.
    content.vb: Public Sub New(toAddress As String = "", amount As Integer = 0, tx As String = "")
  overload: EF.Blockchain.Domain.TransactionOutput.#ctor*
  nameWithType.vb: TransactionOutput.New(String, Integer, String)
  fullName.vb: EF.Blockchain.Domain.TransactionOutput.New(String, Integer, String)
  name.vb: New(String, Integer, String)
- uid: EF.Blockchain.Domain.TransactionOutput.IsValid
  commentId: M:EF.Blockchain.Domain.TransactionOutput.IsValid
  id: IsValid
  parent: EF.Blockchain.Domain.TransactionOutput
  langs:
  - csharp
  - vb
  name: IsValid()
  nameWithType: TransactionOutput.IsValid()
  fullName: EF.Blockchain.Domain.TransactionOutput.IsValid()
  type: Method
  source:
    remote:
      path: backend/EF.Blockchain/src/EF.Blockchain.Domain/TransactionOutput.cs
      branch: main
      repo: https://github.com/efernandes-tech/web3-001-ef-blockchain.git
    id: IsValid
    path: ../src/EF.Blockchain.Domain/TransactionOutput.cs
    startLine: 46
  assemblies:
  - EF.Blockchain.Domain
  namespace: EF.Blockchain.Domain
  summary: Validates the transaction output fields.
  example: []
  syntax:
    content: public Validation IsValid()
    return:
      type: EF.Blockchain.Domain.Validation
      description: A <xref href="EF.Blockchain.Domain.Validation" data-throw-if-not-resolved="false"></xref> result indicating if the output is valid.
    content.vb: Public Function IsValid() As Validation
  overload: EF.Blockchain.Domain.TransactionOutput.IsValid*
- uid: EF.Blockchain.Domain.TransactionOutput.GetHash
  commentId: M:EF.Blockchain.Domain.TransactionOutput.GetHash
  id: GetHash
  parent: EF.Blockchain.Domain.TransactionOutput
  langs:
  - csharp
  - vb
  name: GetHash()
  nameWithType: TransactionOutput.GetHash()
  fullName: EF.Blockchain.Domain.TransactionOutput.GetHash()
  type: Method
  source:
    remote:
      path: backend/EF.Blockchain/src/EF.Blockchain.Domain/TransactionOutput.cs
      branch: main
      repo: https://github.com/efernandes-tech/web3-001-ef-blockchain.git
    id: GetHash
    path: ../src/EF.Blockchain.Domain/TransactionOutput.cs
    startLine: 61
  assemblies:
  - EF.Blockchain.Domain
  namespace: EF.Blockchain.Domain
  summary: Generates a SHA256 hash based on the output's address and amount.
  example: []
  syntax:
    content: public string GetHash()
    return:
      type: System.String
      description: A lowercase hexadecimal string representing the hash.
    content.vb: Public Function GetHash() As String
  overload: EF.Blockchain.Domain.TransactionOutput.GetHash*
- uid: EF.Blockchain.Domain.TransactionOutput.SetTx(System.String)
  commentId: M:EF.Blockchain.Domain.TransactionOutput.SetTx(System.String)
  id: SetTx(System.String)
  parent: EF.Blockchain.Domain.TransactionOutput
  langs:
  - csharp
  - vb
  name: SetTx(string)
  nameWithType: TransactionOutput.SetTx(string)
  fullName: EF.Blockchain.Domain.TransactionOutput.SetTx(string)
  type: Method
  source:
    remote:
      path: backend/EF.Blockchain/src/EF.Blockchain.Domain/TransactionOutput.cs
      branch: main
      repo: https://github.com/efernandes-tech/web3-001-ef-blockchain.git
    id: SetTx
    path: ../src/EF.Blockchain.Domain/TransactionOutput.cs
    startLine: 73
  assemblies:
  - EF.Blockchain.Domain
  namespace: EF.Blockchain.Domain
  summary: Sets the parent transaction hash for this output.
  example: []
  syntax:
    content: public void SetTx(string txHash)
    parameters:
    - id: txHash
      type: System.String
      description: The transaction hash to associate.
    content.vb: Public Sub SetTx(txHash As String)
  overload: EF.Blockchain.Domain.TransactionOutput.SetTx*
  nameWithType.vb: TransactionOutput.SetTx(String)
  fullName.vb: EF.Blockchain.Domain.TransactionOutput.SetTx(String)
  name.vb: SetTx(String)
references:
- uid: EF.Blockchain.Domain
  commentId: N:EF.Blockchain.Domain
  href: EF.html
  name: EF.Blockchain.Domain
  nameWithType: EF.Blockchain.Domain
  fullName: EF.Blockchain.Domain
  spec.csharp:
  - uid: EF
    name: EF
    href: EF.html
  - name: .
  - uid: EF.Blockchain
    name: Blockchain
    href: EF.Blockchain.html
  - name: .
  - uid: EF.Blockchain.Domain
    name: Domain
    href: EF.Blockchain.Domain.html
  spec.vb:
  - uid: EF
    name: EF
    href: EF.html
  - name: .
  - uid: EF.Blockchain
    name: Blockchain
    href: EF.Blockchain.html
  - name: .
  - uid: EF.Blockchain.Domain
    name: Domain
    href: EF.Blockchain.Domain.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: EF.Blockchain.Domain.TransactionOutput.ToAddress*
  commentId: Overload:EF.Blockchain.Domain.TransactionOutput.ToAddress
  href: EF.Blockchain.Domain.TransactionOutput.html#EF_Blockchain_Domain_TransactionOutput_ToAddress
  name: ToAddress
  nameWithType: TransactionOutput.ToAddress
  fullName: EF.Blockchain.Domain.TransactionOutput.ToAddress
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: EF.Blockchain.Domain.TransactionOutput.Amount*
  commentId: Overload:EF.Blockchain.Domain.TransactionOutput.Amount
  href: EF.Blockchain.Domain.TransactionOutput.html#EF_Blockchain_Domain_TransactionOutput_Amount
  name: Amount
  nameWithType: TransactionOutput.Amount
  fullName: EF.Blockchain.Domain.TransactionOutput.Amount
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: EF.Blockchain.Domain.TransactionOutput.Tx*
  commentId: Overload:EF.Blockchain.Domain.TransactionOutput.Tx
  href: EF.Blockchain.Domain.TransactionOutput.html#EF_Blockchain_Domain_TransactionOutput_Tx
  name: Tx
  nameWithType: TransactionOutput.Tx
  fullName: EF.Blockchain.Domain.TransactionOutput.Tx
- uid: EF.Blockchain.Domain.TransactionOutput
  commentId: T:EF.Blockchain.Domain.TransactionOutput
  parent: EF.Blockchain.Domain
  href: EF.Blockchain.Domain.TransactionOutput.html
  name: TransactionOutput
  nameWithType: TransactionOutput
  fullName: EF.Blockchain.Domain.TransactionOutput
- uid: EF.Blockchain.Domain.TransactionOutput.#ctor*
  commentId: Overload:EF.Blockchain.Domain.TransactionOutput.#ctor
  href: EF.Blockchain.Domain.TransactionOutput.html#EF_Blockchain_Domain_TransactionOutput__ctor_System_String_System_Int32_System_String_
  name: TransactionOutput
  nameWithType: TransactionOutput.TransactionOutput
  fullName: EF.Blockchain.Domain.TransactionOutput.TransactionOutput
  nameWithType.vb: TransactionOutput.New
  fullName.vb: EF.Blockchain.Domain.TransactionOutput.New
  name.vb: New
- uid: EF.Blockchain.Domain.Validation
  commentId: T:EF.Blockchain.Domain.Validation
  parent: EF.Blockchain.Domain
  href: EF.Blockchain.Domain.Validation.html
  name: Validation
  nameWithType: Validation
  fullName: EF.Blockchain.Domain.Validation
- uid: EF.Blockchain.Domain.TransactionOutput.IsValid*
  commentId: Overload:EF.Blockchain.Domain.TransactionOutput.IsValid
  href: EF.Blockchain.Domain.TransactionOutput.html#EF_Blockchain_Domain_TransactionOutput_IsValid
  name: IsValid
  nameWithType: TransactionOutput.IsValid
  fullName: EF.Blockchain.Domain.TransactionOutput.IsValid
- uid: EF.Blockchain.Domain.TransactionOutput.GetHash*
  commentId: Overload:EF.Blockchain.Domain.TransactionOutput.GetHash
  href: EF.Blockchain.Domain.TransactionOutput.html#EF_Blockchain_Domain_TransactionOutput_GetHash
  name: GetHash
  nameWithType: TransactionOutput.GetHash
  fullName: EF.Blockchain.Domain.TransactionOutput.GetHash
- uid: EF.Blockchain.Domain.TransactionOutput.SetTx*
  commentId: Overload:EF.Blockchain.Domain.TransactionOutput.SetTx
  href: EF.Blockchain.Domain.TransactionOutput.html#EF_Blockchain_Domain_TransactionOutput_SetTx_System_String_
  name: SetTx
  nameWithType: TransactionOutput.SetTx
  fullName: EF.Blockchain.Domain.TransactionOutput.SetTx
